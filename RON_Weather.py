{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNjPtgLTG117ePFKdrmRKCj",
      "include_colab_link": True
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aneesmohammed3122-design/RON-Weather/blob/main/RON_Weather.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XJuac_9DXm56"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e4232de1"
      },
      "source": [
        "# Task\n",
        "Create a weather monitoring application similar to Google Weather with a different look and feel."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "57ea9a78"
      },
      "source": [
        "## Install necessary libraries\n",
        "\n",
        "### Subtask:\n",
        "Install libraries for fetching weather data and for creating a user interface.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "de1f2f41"
      },
      "source": [
        "**Reasoning**:\n",
        "The subtask is to install libraries for fetching weather data and creating a user interface. I will use pip to install the `requests` and `streamlit` libraries.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b904ac04",
        "outputId": "e7110bf2-a770-415f-95f6-4529767963b9"
      },
      "source": [
        "%pip install requests streamlit"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (2.32.4)\n",
            "Collecting streamlit\n",
            "  Downloading streamlit-1.50.0-py3-none-any.whl.metadata (9.5 kB)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests) (2025.8.3)\n",
            "Requirement already satisfied: altair!=5.4.0,!=5.4.1,<6,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.2.1)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (25.0)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (11.3.0)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.29.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.5.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.12/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (4.15.0)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.12/dist-packages (from streamlit) (3.1.45)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (4.25.1)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2.5.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.12/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.12/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2025.9.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.27.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Downloading streamlit-1.50.0-py3-none-any.whl (10.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.1/10.1 MB\u001b[0m \u001b[31m66.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m112.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.50.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fe4918cd"
      },
      "source": [
        "## Get api key\n",
        "\n",
        "### Subtask:\n",
        "Obtain an API key from a weather service provider (e.g., OpenWeatherMap, WeatherAPI).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a36691b1"
      },
      "source": [
        "## Fetch weather data\n",
        "\n",
        "### Subtask:\n",
        "Write code to fetch weather data from the API based on user input (e.g., city name).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7656565d"
      },
      "source": [
        "**Reasoning**:\n",
        "Define a function to fetch weather data from the API based on user input, handling potential errors and returning the extracted data.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8651d80c"
      },
      "source": [
        "import requests\n",
        "\n",
        "def get_weather_data(api_key: str, city_name: str):\n",
        "    \"\"\"\n",
        "    Fetches weather data from OpenWeatherMap API.\n",
        "\n",
        "    Args:\n",
        "        api_key: Your OpenWeatherMap API key.\n",
        "        city_name: The name of the city to get weather data for.\n",
        "\n",
        "    Returns:\n",
        "        A dictionary containing relevant weather information or an error message.\n",
        "    \"\"\"\n",
        "    base_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n",
        "    complete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name + \"&units=metric\"\n",
        "\n",
        "    try:\n",
        "        response = requests.get(complete_url)\n",
        "        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)\n",
        "        data = response.json()\n",
        "\n",
        "        # Check if the city was not found\n",
        "        if data[\"cod\"] == \"404\":\n",
        "            return {\"error\": \"City Not Found\"}\n",
        "\n",
        "        # Extract relevant information\n",
        "        main_data = data[\"main\"]\n",
        "        weather_description = data[\"weather\"][0][\"description\"]\n",
        "        temperature = main_data[\"temp\"]\n",
        "        humidity = main_data[\"humidity\"]\n",
        "        wind_speed = data[\"wind\"][\"speed\"]\n",
        "\n",
        "        weather_info = {\n",
        "            \"temperature\": temperature,\n",
        "            \"humidity\": humidity,\n",
        "            \"description\": weather_description,\n",
        "            \"wind_speed\": wind_speed,\n",
        "            \"city\": data[\"name\"]\n",
        "        }\n",
        "        return weather_info\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        return {\"error\": f\"Error fetching data: {e}\"}\n",
        "    except Exception as e:\n",
        "        return {\"error\": f\"An unexpected error occurred: {e}\"}\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "be83e4a3"
      },
      "source": [
        "## Display weather data\n",
        "\n",
        "### Subtask:\n",
        "Create a user interface to display the fetched weather data in a user-friendly format.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "acc0de00"
      },
      "source": [
        "**Reasoning**:\n",
        "Create the Streamlit application structure to display weather data.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6d294750",
        "outputId": "117d1efb-d550-4b4a-e411-8383f5eefef1"
      },
      "source": [
        "import streamlit as st\n",
        "\n",
        "st.title(\"Weather Monitoring Application\")\n",
        "\n",
        "city_name = st.text_input(\"Enter city name:\")\n",
        "\n",
        "if st.button(\"Get Weather\"):\n",
        "    # Placeholder API key - replace with a valid key in a real application\n",
        "    api_key = \"YOUR_PLACEHOLDER_API_KEY\"\n",
        "    weather_data = get_weather_data(api_key, city_name)\n",
        "\n",
        "    if \"error\" in weather_data:\n",
        "        st.error(weather_data[\"error\"])\n",
        "    else:\n",
        "        st.write(f\"### Weather in {weather_data['city']}\")\n",
        "        st.info(f\"Temperature: {weather_data['temperature']}°C\")\n",
        "        st.info(f\"Description: {weather_data['description'].capitalize()}\")\n",
        "        st.info(f\"Humidity: {weather_data['humidity']}%\")\n",
        "        st.info(f\"Wind Speed: {weather_data['wind_speed']} m/s\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-09-25 10:18:26.642 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.763 \n",
            "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
            "  command:\n",
            "\n",
            "    streamlit run /usr/local/lib/python3.12/dist-packages/colab_kernel_launcher.py [ARGUMENTS]\n",
            "2025-09-25 10:18:26.764 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.765 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.767 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.769 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.770 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.770 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.771 Session state does not function when running a script without `streamlit run`\n",
            "2025-09-25 10:18:26.772 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.773 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.774 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.775 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.776 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.777 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.777 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.778 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:26.779 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fcd43263"
      },
      "source": [
        "## Add additional features (optional)\n",
        "\n",
        "### Subtask:\n",
        "Implement features like weather forecasts, temperature units conversion, or location-based weather.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "185520da"
      },
      "source": [
        "**Reasoning**:\n",
        "The subtask requires modifying the existing `get_weather_data` function to fetch forecast data, updating the Streamlit UI to display this forecast, adding a temperature unit selection mechanism, and modifying the display logic to handle unit conversion. This involves significant code modifications and additions to the previous work. I will combine these steps into a single code block for efficiency.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a78f34f3",
        "outputId": "a13b5f13-105e-4808-a2d3-de8d14146496"
      },
      "source": [
        "import streamlit as st\n",
        "import requests\n",
        "\n",
        "def get_weather_data(api_key: str, city_name: str):\n",
        "    \"\"\"\n",
        "    Fetches current weather and forecast data from OpenWeatherMap API.\n",
        "\n",
        "    Args:\n",
        "        api_key: Your OpenWeatherMap API key.\n",
        "        city_name: The name of the city to get weather data for.\n",
        "\n",
        "    Returns:\n",
        "        A dictionary containing relevant weather and forecast information or an error message.\n",
        "    \"\"\"\n",
        "    base_url_weather = \"http://api.openweathermap.org/data/2.5/weather?\"\n",
        "    base_url_forecast = \"http://api.openweathermap.org/data/2.5/forecast?\"\n",
        "\n",
        "    complete_url_weather = base_url_weather + \"appid=\" + api_key + \"&q=\" + city_name + \"&units=metric\"\n",
        "    complete_url_forecast = base_url_forecast + \"appid=\" + api_key + \"&q=\" + city_name + \"&units=metric\"\n",
        "\n",
        "    weather_info = {}\n",
        "\n",
        "    try:\n",
        "        # Fetch current weather data\n",
        "        response_weather = requests.get(complete_url_weather)\n",
        "        response_weather.raise_for_status()\n",
        "        data_weather = response_weather.json()\n",
        "\n",
        "        if data_weather[\"cod\"] == \"404\":\n",
        "            return {\"error\": \"City Not Found\"}\n",
        "\n",
        "        main_data = data_weather[\"main\"]\n",
        "        weather_description = data_weather[\"weather\"][0][\"description\"]\n",
        "        temperature = main_data[\"temp\"]\n",
        "        humidity = main_data[\"humidity\"]\n",
        "        wind_speed = data_weather[\"wind\"][\"speed\"]\n",
        "\n",
        "        weather_info = {\n",
        "            \"current\": {\n",
        "                \"temperature\": temperature,\n",
        "                \"humidity\": humidity,\n",
        "                \"description\": weather_description,\n",
        "                \"wind_speed\": wind_speed,\n",
        "                \"city\": data_weather[\"name\"]\n",
        "            }\n",
        "        }\n",
        "\n",
        "        # Fetch forecast data\n",
        "        response_forecast = requests.get(complete_url_forecast)\n",
        "        response_forecast.raise_for_status()\n",
        "        data_forecast = response_forecast.json()\n",
        "\n",
        "        if data_forecast[\"cod\"] == \"404\":\n",
        "             # If current weather was found but forecast wasn't, still return current weather\n",
        "            if \"current\" in weather_info:\n",
        "                weather_info[\"forecast\"] = {\"error\": \"Forecast not available\"}\n",
        "                return weather_info\n",
        "            else:\n",
        "                return {\"error\": \"City Not Found\"}\n",
        "\n",
        "\n",
        "        # Extract forecast information (e.g., for the next few days)\n",
        "        # OpenWeatherMap provides forecast in 3-hour intervals, we'll take one per day\n",
        "        forecast_list = data_forecast[\"list\"]\n",
        "        daily_forecast = []\n",
        "        # Simple approach: take the data point around noon for each day\n",
        "        import datetime\n",
        "        today = datetime.date.today()\n",
        "        for forecast in forecast_list:\n",
        "            forecast_time = datetime.datetime.fromtimestamp(forecast['dt'])\n",
        "            if forecast_time.date() > today and forecast_time.hour >= 11 and forecast_time.hour <= 13:\n",
        "                 daily_forecast.append({\n",
        "                     \"date\": forecast_time.strftime(\"%Y-%m-%d\"),\n",
        "                     \"temperature\": forecast[\"main\"][\"temp\"],\n",
        "                     \"description\": forecast[\"weather\"][0][\"description\"],\n",
        "                 })\n",
        "            # Limit to next 5 days\n",
        "            if len(daily_forecast) >= 5:\n",
        "                break\n",
        "\n",
        "\n",
        "        weather_info[\"forecast\"] = daily_forecast\n",
        "\n",
        "        return weather_info\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        return {\"error\": f\"Error fetching data: {e}\"}\n",
        "    except Exception as e:\n",
        "        return {\"error\": f\"An unexpected error occurred: {e}\"}\n",
        "\n",
        "def celsius_to_fahrenheit(celsius):\n",
        "    return (celsius * 9/5) + 32\n",
        "\n",
        "st.title(\"Weather Monitoring Application\")\n",
        "\n",
        "city_name = st.text_input(\"Enter city name:\")\n",
        "\n",
        "# Add temperature unit selection\n",
        "unit = st.radio(\"Select Temperature Unit:\", ('Celsius', 'Fahrenheit'))\n",
        "\n",
        "if st.button(\"Get Weather\"):\n",
        "    # Placeholder API key - replace with a valid key in a real application\n",
        "    api_key = \"YOUR_PLACEHOLDER_API_KEY\"\n",
        "    weather_data = get_weather_data(api_key, city_name)\n",
        "\n",
        "    if \"error\" in weather_data:\n",
        "        st.error(weather_data[\"error\"])\n",
        "    else:\n",
        "        # Display current weather\n",
        "        st.write(f\"### Current Weather in {weather_data['current']['city']}\")\n",
        "        current_temp = weather_data['current']['temperature']\n",
        "        if unit == 'Fahrenheit':\n",
        "            current_temp = celsius_to_fahrenheit(current_temp)\n",
        "            temp_unit = '°F'\n",
        "        else:\n",
        "            temp_unit = '°C'\n",
        "\n",
        "        st.info(f\"Temperature: {current_temp:.2f}{temp_unit}\")\n",
        "        st.info(f\"Description: {weather_data['current']['description'].capitalize()}\")\n",
        "        st.info(f\"Humidity: {weather_data['current']['humidity']}%\")\n",
        "        st.info(f\"Wind Speed: {weather_data['current']['wind_speed']} m/s\")\n",
        "\n",
        "        # Display forecast\n",
        "        if \"forecast\" in weather_data and weather_data[\"forecast\"] and \"error\" not in weather_data[\"forecast\"]:\n",
        "            st.write(\"### Weather Forecast\")\n",
        "            for day in weather_data[\"forecast\"]:\n",
        "                forecast_temp = day['temperature']\n",
        "                if unit == 'Fahrenheit':\n",
        "                    forecast_temp = celsius_to_fahrenheit(forecast_temp)\n",
        "                    temp_unit = '°F'\n",
        "                else:\n",
        "                    temp_unit = '°C'\n",
        "                st.write(f\"**{day['date']}**: {forecast_temp:.2f}{temp_unit} - {day['description'].capitalize()}\")\n",
        "        elif \"forecast\" in weather_data and \"error\" in weather_data[\"forecast\"]:\n",
        "             st.warning(weather_data[\"forecast\"][\"error\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-09-25 10:18:51.278 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.279 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.280 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.280 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.282 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.282 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.283 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.284 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.284 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.285 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.286 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.287 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.288 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.289 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.290 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.291 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.292 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.293 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.294 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.295 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.296 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.296 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:18:51.298 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "91884b1a"
      },
      "source": [
        "## Refine ui/ux\n",
        "\n",
        "### Subtask:\n",
        "Improve the look and feel of the application to match the desired design.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fc1702b7"
      },
      "source": [
        "**Reasoning**:\n",
        "Improve the look and feel of the application by using Streamlit layout options, visual elements, and potentially custom CSS.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "565c5324",
        "outputId": "c0a4b3b8-428f-44f6-84fa-71c2ae7bdc90"
      },
      "source": [
        "import streamlit as st\n",
        "import requests\n",
        "import datetime\n",
        "\n",
        "def get_weather_data(api_key: str, city_name: str):\n",
        "    \"\"\"\n",
        "    Fetches current weather and forecast data from OpenWeatherMap API.\n",
        "\n",
        "    Args:\n",
        "        api_key: Your OpenWeatherMap API key.\n",
        "        city_name: The name of the city to get weather data for.\n",
        "\n",
        "    Returns:\n",
        "        A dictionary containing relevant weather and forecast information or an error message.\n",
        "    \"\"\"\n",
        "    base_url_weather = \"http://api.openweathermap.org/data/2.5/weather?\"\n",
        "    base_url_forecast = \"http://api.openweathermap.org/data/2.5/forecast?\"\n",
        "\n",
        "    complete_url_weather = base_url_weather + \"appid=\" + api_key + \"&q=\" + city_name + \"&units=metric\"\n",
        "    complete_url_forecast = base_url_forecast + \"appid=\" + api_key + \"&q=\" + city_name + \"&units=metric\"\n",
        "\n",
        "    weather_info = {}\n",
        "\n",
        "    try:\n",
        "        # Fetch current weather data\n",
        "        response_weather = requests.get(complete_url_weather)\n",
        "        response_weather.raise_for_status()\n",
        "        data_weather = response_weather.json()\n",
        "\n",
        "        if data_weather[\"cod\"] == \"404\":\n",
        "            return {\"error\": \"City Not Found\"}\n",
        "\n",
        "        main_data = data_weather[\"main\"]\n",
        "        weather_description = data_weather[\"weather\"][0][\"description\"]\n",
        "        temperature = main_data[\"temp\"]\n",
        "        humidity = main_data[\"humidity\"]\n",
        "        wind_speed = data_weather[\"wind\"][\"speed\"]\n",
        "        weather_icon_code = data_weather[\"weather\"][0][\"icon\"]\n",
        "\n",
        "        weather_info = {\n",
        "            \"current\": {\n",
        "                \"temperature\": temperature,\n",
        "                \"humidity\": humidity,\n",
        "                \"description\": weather_description,\n",
        "                \"wind_speed\": wind_speed,\n",
        "                \"city\": data_weather[\"name\"],\n",
        "                \"icon\": weather_icon_code\n",
        "            }\n",
        "        }\n",
        "\n",
        "        # Fetch forecast data\n",
        "        response_forecast = requests.get(complete_url_forecast)\n",
        "        response_forecast.raise_for_status()\n",
        "        data_forecast = response_forecast.json()\n",
        "\n",
        "        if data_forecast[\"cod\"] == \"404\":\n",
        "             # If current weather was found but forecast wasn't, still return current weather\n",
        "            if \"current\" in weather_info:\n",
        "                weather_info[\"forecast\"] = {\"error\": \"Forecast not available\"}\n",
        "                return weather_info\n",
        "            else:\n",
        "                return {\"error\": \"City Not Found\"}\n",
        "\n",
        "\n",
        "        # Extract forecast information (e.g., for the next few days)\n",
        "        # OpenWeatherMap provides forecast in 3-hour intervals, we'll take one per day\n",
        "        forecast_list = data_forecast[\"list\"]\n",
        "        daily_forecast = []\n",
        "        # Simple approach: take the data point around noon for each day\n",
        "        today = datetime.date.today()\n",
        "        for forecast in forecast_list:\n",
        "            forecast_time = datetime.datetime.fromtimestamp(forecast['dt'])\n",
        "            if forecast_time.date() > today and forecast_time.hour >= 11 and forecast_time.hour <= 13:\n",
        "                 daily_forecast.append({\n",
        "                     \"date\": forecast_time.strftime(\"%Y-%m-%d\"),\n",
        "                     \"temperature\": forecast[\"main\"][\"temp\"],\n",
        "                     \"description\": forecast[\"weather\"][0][\"description\"],\n",
        "                     \"icon\": forecast[\"weather\"][0][\"icon\"]\n",
        "                 })\n",
        "            # Limit to next 5 days\n",
        "            if len(daily_forecast) >= 5:\n",
        "                break\n",
        "\n",
        "\n",
        "        weather_info[\"forecast\"] = daily_forecast\n",
        "\n",
        "        return weather_info\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        return {\"error\": f\"Error fetching data: {e}\"}\n",
        "    except Exception as e:\n",
        "        return {\"error\": f\"An unexpected error occurred: {e}\"}\n",
        "\n",
        "def celsius_to_fahrenheit(celsius):\n",
        "    return (celsius * 9/5) + 32\n",
        "\n",
        "# Custom CSS for a different look and feel\n",
        "st.markdown(\"\"\"\n",
        "<style>\n",
        ".main {\n",
        "    background-color: #f0f2f6;\n",
        "    padding: 20px;\n",
        "}\n",
        ".stTextInput > div > div > input {\n",
        "    border-radius: 10px;\n",
        "    border: 1px solid #cccccc;\n",
        "    padding: 10px;\n",
        "}\n",
        ".stButton > button {\n",
        "    background-color: #4CAF50;\n",
        "    color: white;\n",
        "    border-radius: 10px;\n",
        "    padding: 10px 20px;\n",
        "    border: none;\n",
        "    cursor: pointer;\n",
        "}\n",
        ".stButton > button:hover {\n",
        "    background-color: #45a049;\n",
        "}\n",
        ".stInfo {\n",
        "    background-color: #e7f3fe;\n",
        "    color: #004085;\n",
        "    border-radius: 10px;\n",
        "    padding: 10px;\n",
        "    margin-bottom: 10px;\n",
        "}\n",
        ".stRadio > label {\n",
        "    font-weight: bold;\n",
        "}\n",
        "h1 {\n",
        "    color: #333;\n",
        "    text-align: center;\n",
        "}\n",
        "h3 {\n",
        "    color: #555;\n",
        "    margin-top: 20px;\n",
        "    margin-bottom: 15px;\n",
        "}\n",
        ".weather-icon {\n",
        "    vertical-align: middle;\n",
        "    margin-right: 10px;\n",
        "}\n",
        "</style>\n",
        "\"\"\", unsafe_allow_html=True)\n",
        "\n",
        "\n",
        "st.title(\"Weather Monitoring Application\")\n",
        "\n",
        "# Use columns for better layout\n",
        "col1, col2 = st.columns([3, 1])\n",
        "\n",
        "with col1:\n",
        "    city_name = st.text_input(\"Enter city name:\")\n",
        "\n",
        "with col2:\n",
        "    unit = st.radio(\"Unit:\", ('°C', '°F')) # Shorter unit labels\n",
        "\n",
        "if st.button(\"Get Weather\"):\n",
        "    # Placeholder API key - replace with a valid key in a real application\n",
        "    api_key = \"YOUR_PLACEHOLDER_API_KEY\"\n",
        "    weather_data = get_weather_data(api_key, city_name)\n",
        "\n",
        "    if \"error\" in weather_data:\n",
        "        st.error(weather_data[\"error\"])\n",
        "    else:\n",
        "        # Display current weather with icon\n",
        "        st.write(f\"### Current Weather in {weather_data['current']['city']}\")\n",
        "        current_temp = weather_data['current']['temperature']\n",
        "        if unit == '°F':\n",
        "            current_temp = celsius_to_fahrenheit(current_temp)\n",
        "            temp_unit = '°F'\n",
        "        else:\n",
        "            temp_unit = '°C'\n",
        "\n",
        "        weather_icon_url = f\"http://openweathermap.org/img/wn/{weather_data['current']['icon']}@2x.png\"\n",
        "\n",
        "        st.markdown(f\"\"\"\n",
        "        <div class=\"stInfo\">\n",
        "            <img src=\"{weather_icon_url}\" width=\"50\" class=\"weather-icon\">\n",
        "            Temperature: {current_temp:.1f}{temp_unit}<br>\n",
        "            Description: {weather_data['current']['description'].capitalize()}<br>\n",
        "            Humidity: {weather_data['current']['humidity']}%<br>\n",
        "            Wind Speed: {weather_data['current']['wind_speed']} m/s\n",
        "        </div>\n",
        "        \"\"\", unsafe_allow_html=True)\n",
        "\n",
        "\n",
        "        # Display forecast\n",
        "        if \"forecast\" in weather_data and weather_data[\"forecast\"] and \"error\" not in weather_data[\"forecast\"]:\n",
        "            st.write(\"### Weather Forecast\")\n",
        "            # Use columns for forecast days\n",
        "            forecast_cols = st.columns(len(weather_data[\"forecast\"]))\n",
        "            for i, day in enumerate(weather_data[\"forecast\"]):\n",
        "                with forecast_cols[i]:\n",
        "                    forecast_temp = day['temperature']\n",
        "                    if unit == '°F':\n",
        "                        forecast_temp = celsius_to_fahrenheit(forecast_temp)\n",
        "                        temp_unit = '°F'\n",
        "                    else:\n",
        "                        temp_unit = '°C'\n",
        "                    forecast_icon_url = f\"http://openweathermap.org/img/wn/{day['icon']}@2x.png\"\n",
        "                    st.markdown(f\"\"\"\n",
        "                    <div style=\"text-align: center; border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px;\">\n",
        "                        **{datetime.datetime.strptime(day['date'], '%Y-%m-%d').strftime('%b %d')}**<br>\n",
        "                        <img src=\"{forecast_icon_url}\" width=\"40\"><br>\n",
        "                        {forecast_temp:.1f}{temp_unit}<br>\n",
        "                        <span style=\"font-size: 0.9em;\">{day['description'].capitalize()}</span>\n",
        "                    </div>\n",
        "                    \"\"\", unsafe_allow_html=True)\n",
        "\n",
        "        elif \"forecast\" in weather_data and \"error\" in weather_data[\"forecast\"]:\n",
        "             st.warning(weather_data[\"forecast\"][\"error\"])\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-09-25 10:19:17.664 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.666 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.667 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.668 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.669 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.670 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.671 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.672 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.674 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.675 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.676 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.677 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.677 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.678 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.679 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.680 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.681 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.682 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.683 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.684 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.685 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.686 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.686 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.688 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.691 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.692 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.693 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.694 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-25 10:19:17.694 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f3abca4d"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   The necessary libraries for fetching weather data (`requests`) and building the UI (`streamlit`) were successfully installed.\n",
        "*   Code was written to fetch both current weather data and a multi-day forecast from the OpenWeatherMap API based on a city name.\n",
        "*   The application's user interface was built using Streamlit, including input fields for the city name, a button to trigger the data fetch, and display areas for the weather information.\n",
        "*   Additional features were added to the application, including the display of a weather forecast for the next few days and the ability to switch between Celsius and Fahrenheit units for temperature display.\n",
        "*   The look and feel of the Streamlit application were refined using custom CSS and layout elements like columns, incorporating weather icons and improving the overall presentation of the data.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   While the UI has been improved, further refinement could involve more sophisticated CSS theming or integrating with a dedicated Streamlit theming library for a more distinct look and feel.\n",
        "*   Enhance the error handling to provide more specific feedback to the user (e.g., distinguish between network errors and API key issues).\n"
      ]
    }
  ]
}
